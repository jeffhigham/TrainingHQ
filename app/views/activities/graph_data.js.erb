//Dynamic content from the activity controller.

var lap_start_distances = <%= @javascript_data[:lap_start_distances] %>;

var lap_start_times = <%= @javascript_data[:lap_start_times].to_s.html_safe %>;

var data_time = <%= @javascript_data[:data_time] %>;

var data_distance = <%= @javascript_data[:data_distance] %>;

var current_data = data_time;

var current_lap_start = lap_start_times;

lap_start_times.push(data_time[data_time.length - 1 ][0]);

lap_start_distances.push(data_distance[data_distance.length - 1][0]);

var laps = generateLaps();

window.onload = function() {
    $('#0').prop('checked',true);
    $('#1').prop('checked', true);
    $('#2').prop('checked',true);
    $('#3').prop('checked',true);
    $('#4').prop('checked',true);
    drawDyGraph( maxMultiValuesScaledBy(current_data,1) );
    mouseOutCanvasCallback();
}

function generateLaps(){
    var lap_data = [];
    var lap_index = 0;

    if( lap_start_times.length == 1){
        lap_data[lap_index] = data_time;
    }
    else {

        for (var i = 0; i < data_time.length; i++){

            if( typeof(lap_data[lap_index]) == "undefined"){
                lap_data[lap_index] = [];
            }

            if( data_time[i][0] >= lap_start_times[lap_index] && data_time[i][0] < lap_start_times[lap_index + 1] ){
                lap_data[lap_index].push(data_time[i]);
            }

            else {
                // The last lap_start_times value is the last datapoint
                // in the activity. If this is "undefined" we are at the 
                // last datapoint and will break out of the loop and return.
                if( typeof(lap_start_times[lap_index + 1]) ==  "number" ){
                  lap_index++;
                    lap_data[lap_index] = [];
                    lap_data[lap_index].push(data_time[i]);
                }
            }
        }
    }

    return lap_data;
}

function scaleBySlider(){
    var scale_factor = $('#graph_scale_slider').val();
    drawDyGraph( maxMultiValuesScaledBy(current_data,scale_factor) );
}

function handleLaps(){
    var scale_factor = parseInt($('#graph_scale_slider').val());
    var lap_selection = parseInt($('#lap_dataset_option').val());

    if( lap_selection >= 0 ){
        current_data = laps[lap_selection];
    }
    else {
        // reset the lap selector to all
    }

    drawDyGraph( maxMultiValuesScaledBy(current_data,scale_factor) );
}

function selectTimeDistance(){
    var data_option = $('#graph_dataset_option').val();
    var scale_factor = $('#graph_scale_slider').val();
    if( data_option == "distance"){
        current_data = data_distance;
        current_lap_start = lap_start_distances;
    }
    else {
        current_data = data_time;
        current_lap_start = lap_start_times;
    }

    drawDyGraph( maxMultiValuesScaledBy(current_data,scale_factor) );
}

function drawDyGraph(list){

    g = new Dygraph(
          document.getElementById("chart_canvas"),
          list,
          {
            //rollPeriod: 14,
            //showRoller: true,
            legend: false,
            highlightCircleSize: 5,
            strokeWidth: 2,
            fillGraph: true,
            errorBars: false,
            drawXGrid: false,
            drawYGrid: false,
            drawYAxis: false,
            showRangeSelector: true,
            rangeSelectorPlotFillColor: "rgba(127,255,0,0.2)",
            rangeSelectorPlotStrokeColor: alt_color,
            labelsSeparateLines: false,
            hideOverlayOnMouseOut: true,
            showLabelsOnHighlight: false,
            labels: ["Distance", "Watts", "HR", "Cadence", "Altitude", "Speed"],
            colors: [power_color, hr_color, cadence_color, alt_color, speed_color],
            axisLabelColor: "#fff",
            visibility: [true, true, true, true, true],
            series: {
                'Altitude': {
                    axis: 'Y2',
                    drawYAxis: false
                }
            },

            axes: {
                x: {
                    axisLabelFormatter: xAxisLabelFormatter,
                    axisLabelFontSize: 12,
                    axisLabelColor: "#FFF"
                }
            },

            highlightCallback:  mouseOverCanvasCallback,
            unhighlightCallback: mouseOutCanvasCallback,
            underlayCallback: drawCanvasUnderlay

          }

    );
}

function xAxisLabelFormatter(x){
    var data_option = $('#graph_dataset_option').val();
    if( data_option == "distance"){
        return milesFormatFromFeet(x);
    }
    else {
        return timeFormatFromSeconds(x);
    }
}

// Draws canvas underlay for laps
function drawCanvasUnderlay (canvas, area, g) {

    for (var i=0; i < current_lap_start.length; i++ ) {

        var bottom_left = g.toDomCoords(current_lap_start[i], -20);
        var top_right = g.toDomCoords(current_lap_start[i], +20);

        var left = bottom_left[0];
        var right = top_right[0];

        canvas.fillStyle = "rgba(255, 255, 0, 1.0)";
        canvas.fillRect(left, area.y, right - left, area.h);
    }

}

function mouseOutCanvasCallback(event, x, points, row, seriesName){

    $('#speed_label').html("Speed: 0.0" );
    $('#cadence_label').html("Cadence: 0.0" );
    $('#alt_label').html("Altitude: 0.0" );
    $('#power_label').html("Watts: 0" );
    $('#hr_label').html("Heart Rate: 0" );

}

// Handles dynamic updates when mouse is over the graph.
function mouseOverCanvasCallback(event, x, points, row, seriesName){

    var data_option = $('#graph_dataset_option').val();

    var datapoints = {
            Watts: 0,
            HR: 0,
            Cadence: 0,
            Altitude: 0,
            Speed: 0
    };

    for (var i = 0; i < points.length; i++){
        datapoints[ points[i]['name'] ] = points[i]['yval'];
    }

    if ( data_option == "distance") {
        $('#distance_label').html("Miles: " + milesFormatFromFeet(x) );
    }
    else {
        $('#distance_label').html("Time: " + timeFormatFromSeconds(x) );
    }
    $('#speed_label').html("Speed: " + roundNumber(datapoints['Speed'],1) );
    $('#cadence_label').html("Cadence: " + roundNumber(datapoints['Cadence'],0) );
    $('#alt_label').html("Altitude: " + roundNumber(datapoints['Altitude'],1) );
    $('#power_label').html("Watts: " + roundNumber(datapoints['Watts'],0) );
    $('#hr_label').html("Heart Rate: " + roundNumber(datapoints['HR'],0) );

}

// Toggles check boxes shows / hides a dataset on the graph.
function toggleCheck(el) {
    g.setVisibility(parseInt(el.id), el.checked);
}

