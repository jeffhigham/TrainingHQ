//Dynamic content from the activity controller.

var lap_start_distances = <%= @javascript_data[:lap_start_distances] %>;

var lap_start_times = <%= @javascript_data[:lap_start_times].to_s.html_safe %>;

var data_time = <%= @javascript_data[:data_time] %>;

var data_distance = <%= @javascript_data[:data_distance] %>;

var current_data = data_time;

var current_lap_start = lap_start_times;

lap_start_times.push(data_time[data_time.length - 1 ][0]);

lap_start_distances.push(data_distance[data_distance.length - 1][0]);

var laps_time = generateLaps(data_time,lap_start_times);
var laps_distance = generateLaps(data_distance, lap_start_distances);
var lat_long_data = generateLatLongData(data_time);

var current_laps = laps_time;
var dygraph_data = null; 

window.onload = function() {
    $('#distance_input').prop('checked',true);
    $('#0').prop('checked',true);
    $('#1').prop('checked', true);
    $('#2').prop('checked',true);
    $('#3').prop('checked',true);
    $('#4').prop('checked',true);
    drawDyGraph(current_data);
    mouseOutCanvasCallback();
}

function generateLaps(source_data,start_times){
    var lap_data = [];
    var lap_index = 0;

    if( start_times.length == 1){
        lap_data[lap_index] = source_data;
    }
    else {

        for (var i = 0; i < source_data.length; i++){

            if( typeof(lap_data[lap_index]) == "undefined"){
                lap_data[lap_index] = [];
            }

            if( source_data[i][0] >= start_times[lap_index] && source_data[i][0] < start_times[lap_index + 1] ){
                lap_data[lap_index].push(source_data[i]);
            }

            else {
                // The last start_times value is the last datapoint
                // in the activity. If this is "undefined" we are at the 
                // last datapoint and will break out of the loop and return.
                if( typeof(start_times[lap_index + 1]) ==  "number" ){
                  lap_index++;
                    lap_data[lap_index] = [];
                    lap_data[lap_index].push(source_data[i]);
                }
            }
        }
    }

    return lap_data;
}

function scaleBySlider(){
    //var scale_factor = $('#graph_scale_slider').val();
    drawDyGraph(current_data);
}

function handleLapRowClick(lap_id){

    // lap_id = N or lap_id = NN. Assuming no more than 99 laps.
    var lap_number = (lap_id.length == 9 ) ? parseInt(lap_id[8]) : parseInt(lap_id[8] + lap_id[9]);

    $('#lap_dataset_option').val(lap_number);
    handleLaps();
    resetLapRows();
    highlightTableRow("#" + lap_id);
}


function handleLaps(){

    var lap_selection = $('#lap_dataset_option').val();
    var data_option = $('#graph_dataset_option').val();

    if( lap_selection == "all" ){
        selectTimeDistance(); // resets current data appropriately.
    }
    else {

        if( data_option == "distance"){
            current_data = laps_distance[parseInt(lap_selection)];
        }
        else {
            current_data = laps_time[parseInt(lap_selection)];
        }

        drawDyGraph(current_data);
        resetLapRows();
        highlightTableRow("#lap_row_" + lap_selection);
    }

}

function selectTimeDistance(){

    var lap_selection = $('#lap_dataset_option').val();
    var data_option = $('#graph_dataset_option').val();

    if( data_option == "distance"){
        if ( lap_selection == "all"){
            current_data = data_distance;
            current_laps = laps_distance;
        }
        else {
           current_data = laps_distance[parseInt(lap_selection)]; 
        }
        current_lap_start = lap_start_distances;

    }
    else {
        if ( lap_selection == "all"){
            current_data = data_time;
            current_laps = laps_time;
        }
        else {
           current_data = laps_time[parseInt(lap_selection)]; 
        }
        current_lap_start = lap_start_times;
    }
    drawDyGraph(current_data);
}

function drawDyGraph(list){

    // capture current state of graph.
    var scale_factor = $('#graph_scale_slider').val();
    dygraph_data = maxMultiValuesScaledBy(list,scale_factor);

    g = new Dygraph(
          document.getElementById("chart_canvas"),
          dygraph_data,
          {
            //rollPeriod: 14,
            //showRoller: true,
            legend: false,
            highlightCircleSize: 5,
            strokeWidth: 2,
            fillGraph: true,
            errorBars: false,
            drawXGrid: false,
            drawYGrid: false,
            drawYAxis: false,
            showRangeSelector: true,
            rangeSelectorPlotFillColor: "rgba(127,255,0,0.2)",
            rangeSelectorPlotStrokeColor: alt_color,
            labelsSeparateLines: false,
            hideOverlayOnMouseOut: true,
            showLabelsOnHighlight: false,
            /*
                Setting LNG / LAT here only because we need it in this array for consistency when updating
                markers on the map.  These are set with false visibility because we never want to show
                them on the graph. The colors are set to black for the same reason.  This is a hack but
                should work for now.
            */
            labels: ["Distance", "Watts", "HR", "Cadence", "Altitude", "Speed", "LNG", "LAT", "GRADE"],
            visibility: [true, true, true, true, true, false, false, false],
            colors: [power_color, hr_color, cadence_color, alt_color, speed_color, "#000", "#000", "#000"],
            axisLabelColor: "#fff",
            series: {
                'Altitude': {
                    axis: 'Y2',
                    drawYAxis: false
                }
            },

            axes: {
                x: {
                    axisLabelFormatter: xAxisLabelFormatter,
                    axisLabelFontSize: 12,
                    axisLabelColor: "#FFF"
                }
            },

            highlightCallback:  mouseOverCanvasCallback,
            unhighlightCallback: mouseOutCanvasCallback,
            underlayCallback: drawCanvasUnderlay

          }

    );

    // show visibility based on what is currently checked.
    g.setVisibility(0, $('#0').prop('checked'));
    g.setVisibility(1, $('#1').prop('checked'));
    g.setVisibility(2, $('#2').prop('checked'));
    g.setVisibility(3, $('#3').prop('checked'));
    g.setVisibility(4, $('#4').prop('checked'));

    // zero out display values.
    mouseOutCanvasCallback();

}

function highlightTableRow(id){
    $(id).css({'background-color':'#7fff00', 'color':'#666'}).animate({'background-color':'#FFF'}, 2000);
}

function resetTableRow(id){
    $(id).css({'background-color':'', 'color':''});
}

function findLapFromX(x){

    for ( var i = 0; i < current_lap_start.length; i++ ){
        if( x >= current_lap_start[i] && x < current_lap_start[i+1]){
            return i;
        }
    }

    return false;
}

function resetLapRows(){
    for ( var i = 0; i < current_lap_start.length; i++){
        resetTableRow('#lap_row_' + i);
    }
}

function highlightLapRow(x){
    resetLapRows();
    var lap_id = findLapFromX(x);
    if(typeof(lap_id) == 'number'){
        highlightTableRow('#lap_row_' + lap_id);
    }
}


function xAxisLabelFormatter(x){
    var data_option = $('#graph_dataset_option').val();
    if( data_option == "distance"){
        return milesFormatFromFeet(x);
    }
    else {
        return timeFormatFromSeconds(x);
    }
}

// Draws canvas underlay for laps
function drawCanvasUnderlay (canvas, area, g) {

    for (var i=0; i < current_lap_start.length; i++ ) {

        var bottom_left = g.toDomCoords(current_lap_start[i], -20);
        var top_right = g.toDomCoords(current_lap_start[i], +20);

        var left = bottom_left[0];
        var right = top_right[0];

        canvas.fillStyle = "rgba(255, 255, 0, 1.0)";
        canvas.fillRect(left, area.y, right - left, area.h);
    }

}

function mouseOutCanvasCallback(event, x, points, row, seriesName){

    $('#speed_label').html("Speed: 0.0" );
    $('#cadence_label').html("Cadence: 0.0" );
    $('#alt_label').html("Altitude: 0.0" );
    $('#power_label').html("Watts: 0" );
    $('#hr_label').html("Heart Rate: 0" );

    var lap_selection = $('#lap_dataset_option').val();
    
    if( lap_selection == "all"){
      resetLapRows();  
    }

    if ( Gmaps.map.markers.length > 0 ){
        Gmaps.map.markers[0].setMap(null);
        Gmaps.map.markers = [];
    }
    
}

// Handles dynamic updates when mouse is over the graph.
function mouseOverCanvasCallback(event, x, points, row, seriesName){

    var data_option = $('#graph_dataset_option').val();

    var datapoints = {
            Watts: 0,
            HR: 0,
            Cadence: 0,
            Altitude: 0,
            Speed: 0
    };

    for (var i = 0; i < points.length; i++){
        datapoints[ points[i]['name'] ] = points[i]['yval'];
    }

    if ( data_option == "distance") {
        $('#distance_label').html("Miles: " + milesFormatFromFeet(x) );
    }
    else {
        $('#distance_label').html("Time: " + timeFormatFromSeconds(x) );
    }

    $('#speed_label').html("Speed: " + roundNumber(datapoints['Speed'],1) );
    $('#cadence_label').html("Cadence: " + roundNumber(datapoints['Cadence'],0) );
    $('#alt_label').html("Altitude: " + roundNumber(datapoints['Altitude'],1) );
    $('#power_label').html("Watts: " + roundNumber(datapoints['Watts'],0) );
    $('#hr_label').html("Heart Rate: " + roundNumber(datapoints['HR'],0) );

    highlightLapRow(x);

    var lng = dygraph_data[row][6];
    var lat = dygraph_data[row][7];
    var percent_grade = dygraph_data[row][8];
    var LatLong = new google.maps.LatLng(lat,lng);

    if ( Gmaps.map.markers.length > 0 ){
        //Gmaps.map.markers[0].setMap(null);
        Gmaps.map.markers[0].setPosition(LatLong);
        if(percent_grade < 0){
            Gmaps.map.markers[0].setIcon("/icons/bike_downhill.png");
        }
        else if(percent_grade > 0 ){
            Gmaps.map.markers[0].setIcon("/icons/bike_uphill.png");
        }
        else{
            Gmaps.map.markers[0].setIcon("/icons/cycling.png");
        }
    }
    else {
    
        Gmaps.map.markers[0] = Gmaps.map.createMarker({
            Lat: lat,
            Lng: lng,
            rich_marker: null,
            marker_picture: "",
            marker_width: 10,
            marker_height: 10
        });
        Gmaps.map.markers[0].setIcon("/icons/cycling.png");

    }

}

// Toggles check boxes shows / hides a dataset on the graph.
function toggleCheck(el) {
    g.setVisibility(parseInt(el.id), el.checked);
}

function generateLatLongData(list) {
    var lat_long = [];
    for(var i=0; i<list.length; i++){
        if (list[i][6] > 0 || list[i][7] > 0) {
            lat_long.push( { lng:list[i][6], lat: list[i][7] } );
        }
    }
    return [lat_long];
}

