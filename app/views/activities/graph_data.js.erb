//Dynamic content from the activity controller.
var power_numbers = <%= @activity.power_numbers %>;
var heart_rate_numbers = <%= @activity.heart_rate_numbers %> ;
var cadence_numbers = <%= @activity.cadence_numbers %>;
var altitude_numbers = <%= @activity.altitude_numbers  %>;

// Supporting functions for 
Array.max = function(array){
    return Math.max.apply( Math, array);
}

Array.min = function(array){
    return Math.min.apply( Math, array);
}

// Global variables.
var power_numbers_max = Array.max(power_numbers);
var power_numbers_min = Array.min(power_numbers);
var heart_rate_numbers_max = Array.max(heart_rate_numbers);
var heart_rate_numbers_min = Array.min(heart_rate_numbers);
var cadence_numbers_max = Array.max(cadence_numbers);
var cadence_numbers_min = Array.min(cadence_numbers);
var altitude_numbers_max= Array.max(altitude_numbers);
var altitude_numbers_min= Array.min(altitude_numbers);
var gutterLeft = 120;
var gutterRight = 120;
var gutterTop   = 25;
var power_color = "#FF9900";
var hr_color = "#ff5600";
var alt_color = "#7fff00";
var cadence_color = "#0f8bff";
var element_id = 'all_ride_data';

power_params = {
        'element_id': element_id,
        'ymax': power_numbers_max,
        'ymin': power_numbers_min,
        'linewidth': 2,
        'colors': [power_color],
        'filled': true,
        'fillstyle': 'rgba(255,153,0,0.5)',
        'axis_x': 940,
        'axis_title': "Power (watts)",
        'axis_align': 'right',
        'axis_color': power_color,
        'axis_text_color': power_color
    };

    heart_rate_params = {
        'element_id': element_id,
        'ymax': heart_rate_numbers_max,
        'ymin': heart_rate_numbers_min,
        'linewidth': 2,
        'colors': [hr_color],
        'filled': false,
        'fillstyle': 'rgba(255,86,0,0.5)',
        'axis_x': 995,
        'axis_title': "Heart Rate (bpm)",
        'axis_align': 'right',
        'axis_color': hr_color,
        'axis_text_color': hr_color
    };

    altitude_params = {
        'element_id': element_id,
        'ymax': altitude_numbers_max,
        'ymin': altitude_numbers_min,
        'linewidth': 2,
        'colors': [alt_color],
        'filled': true,
        'fillstyle': 'rgba(127,255,0,0.2)',
        'axis_x': 115,
        'axis_title': "Altitude (ft)",
        'axis_align': 'left',
        'axis_color': alt_color,
        'axis_text_color': alt_color
    };

    cadence_params = {
        'element_id': element_id,
        'ymax': cadence_numbers_max,
        'ymin': cadence_numbers_min,
        'linewidth': 2,
        'colors': [cadence_color],
        'filled': false,
        'fillstyle': 'rgba(15,129,255,0.5)',
        'axis_x': 45,
        'axis_title': "Cadence (rpm)",
        'axis_align': 'left',
        'axis_color': cadence_color,
        'axis_text_color': cadence_color
    };



window.onload = function() {
    $('#cadence_check').prop('checked', true);
    $('#altitude_check').prop('checked',true);
    $('#power_check').prop('checked',true);
    $('#hr_check').prop('checked',true);
    drawScaled(2)
}

function resetGraph(element_id){
    RGraph.Reset(document.getElementById(element_id));
}


function drawLinePlot(params){

    var obj = new RGraph.Line(params['element_id'], params['graph_data']);
    obj.Set('ymax', params['ymax']);
    obj.Set('ymin', params['ymin']);
    obj.Set('hmargin', 5);
    obj.Set('background.grid', false);
    obj.Set('linewidth', params['linewidth']);          
    obj.Set('gutter.right', gutterRight);
    obj.Set('gutter.left', gutterLeft);
    obj.Set('gutter.top', gutterTop);
    obj.Set('colors', params['colors']);
    obj.Set('noaxes', true);
    obj.Set('ylabels', false);
    obj.Set('filled', params['filled']);
    obj.Set('fillstyle', params['fillstyle']);
    obj.Draw();

    RGraph.DrawAxes(obj, {
                                'axis.x': params['axis_x'],
                                'axis.title': params['axis_title'],
                                'axis.color': params['axis_color'],
                                'axis.text.color': params['axis_text_color'],
                                'axis.max': params['ymax'],
                                'axis.min': params['ymin'],
                                'axis.align': params['axis_align']
                               });
}

// Returns a max value in a range of values.
function maxValuesScaledBy(list,scale_factor) {
    var loop_count = 0;
    var max_loop_value = 0;
    var list_count = list.length;
    var loop_rollover = Math.round( list_count * (scale_factor/1000) );
    var return_list = new Array();

    if(loop_rollover <= 1){ return list; }

    for (var i = 0; i < list.length; i++) {
        loop_count++;
        if(max_loop_value < list[i]){
            max_loop_value = list[i];
        }
        if(loop_count == loop_rollover){
            return_list.push(max_loop_value);
            loop_count = 0;
            max_loop_value = 0;
        }  
    }
    return return_list;  
}

// Returns an average value for a range of values.
function aveValuesScaledBy(list,scale_factor) {
    var loop_count = 0;
    var loop_value_sum = 0;
    var list_count = list.length;
    var loop_rollover = Math.round( list_count * (scale_factor/1000) );
    var return_list = new Array();

    if(loop_rollover <= 1){ return list; }

    for (var i = 0; i < list.length; i++) {
        loop_count++;
        loop_value_sum += list[i];
        if(loop_count == loop_rollover){
            return_list.push(loop_value_sum/loop_count);
            loop_count = 0;
            loop_value_sum = 0;
        }  
    }
    return return_list;  
}


function drawScaled(scale_factor_passed)
{
    resetGraph(element_id);
    var scale_factor = 0;
    if(scale_factor_passed) {
        scale_factor = scale_factor_passed;
    }
    else {
        scale_factor = $('#graph_scale_slider').val();
    }
    
    altitude_params['graph_data']   = maxValuesScaledBy(altitude_numbers,scale_factor);
    cadence_params['graph_data']    = maxValuesScaledBy(cadence_numbers,scale_factor);
    heart_rate_params['graph_data'] = maxValuesScaledBy(heart_rate_numbers,scale_factor);
    power_params['graph_data']      = maxValuesScaledBy(power_numbers,scale_factor);

    if ( $('#altitude_check').is(':checked') ){
        drawLinePlot(altitude_params);
    }
    if ( $('#cadence_check').is(':checked') ){
        drawLinePlot(cadence_params);
    }
    if ( $('#hr_check').is(':checked') ){
        drawLinePlot(heart_rate_params);
    }
    if ( $('#power_check').is(':checked') ){
        drawLinePlot(power_params);

        //slide in an ave for power.
        //power_params['filled'] = false;
        //power_params['graph_data'] = aveValuesScaledBy(power_numbers,scale_factor);
        //drawLinePlot(power_params);
    }

}
