//Dynamic content from the activity controller.

var power_zones = <%= @user_power_zones.to_json.html_safe %>;

var hr_zones = <%= @user_hr_zones.to_json.html_safe %>;

var activity = new ThqActivity(<%= @activity.id %>);

var lat_long_data = activity.datafile.map_data();

var power_color = "#FF9900";
var hr_color = "#ff5600";
var alt_color = "#7fff00";
var cadence_color = "#0f8bff";
var speed_color = "#bc65f7";
//var current_laps = laps_time;
var dygraph_data = null;
var power_gauge;
var power_zone_gauge;
var watts_kg_gauge;
var hr_gauge;
var hr_zone_gauge;
var cadence_gauge;
var alt_gauge;
var percent_grade_gauge;
var speed_gauge;


$(document).ready( function() {

    $('#distance_input').prop('checked',true);
    $('#0').prop('checked',true);
    $('#1').prop('checked', true);
    $('#2').prop('checked',true);
    $('#3').prop('checked',true);
    $('#4').prop('checked',true);
    
    power_gauge = drawGauge({id: "power_gauge", value: <%= @activity.min_watts %>, min: <%= @activity.min_watts %>, max: <%= @activity.max_watts %>, title: "Power", valueFontColor: power_color});
    power_zone_gauge = drawGauge({id: "power_zone_gauge", value: 0, min: 0, max: 7, title: "Power Zone", valueFontColor: power_color});
    watts_kg_gauge = drawGauge({id: "watts_kg_gauge", value: 0, min: 0, max: 7, title: "Watts/Kg", valueFontColor: power_color});
    hr_gauge = drawGauge({id: "hr_gauge", value: <%= @activity.min_heart_rate %>, min: <%= @activity.min_heart_rate %>, max: <%= @activity.max_heart_rate %>, title: "HR", valueFontColor: hr_color });
    hr_zone_gauge = drawGauge({id: "hr_zone_gauge", value: 0, min: 0, max: 7, title: "HR Zone", valueFontColor: hr_color });
    cadence_gauge = drawGauge({id: "cadence_gauge", value: <%= @activity.min_cadence %>, min: <%= @activity.min_cadence %>, max: <%= @activity.max_cadence %>, title: "Cadence", valueFontColor: cadence_color });
    alt_gauge = drawGauge({id: "alt_gauge", value: 5000, min: 5000, max: <%= @activity.max_altitude_feet %>, title: "Altitude", valueFontColor: alt_color });
    percent_grade_gauge = drawGauge({id: "percent_grade_gauge", value: 0, min: -25, max: 25, title: "Percent Grade", valueFontColor: alt_color });
    speed_gauge = drawGauge({id: "speed_gauge", value: <%= @activity.min_speed_mph %>, min: <%= @activity.min_speed_mph %> , max: <%= @activity.max_speed_mph %> , title: "Speed (MPH)", valueFontColor: speed_color });
    
    drawDyGraph( activity.datafile.dataset() );
    mouseOutCanvasCallback();
} );

/*
function scaleBySlider(){
    //var scale_factor = $('#graph_scale_slider').val();
    drawDyGraph(current_data);
}


function handleLapRowClick(lap_id){

    // lap_id = N or lap_id = NN. Assuming no more than 99 laps.
    var lap_number = (lap_id.length == 9 ) ? parseInt(lap_id[8]) : parseInt(lap_id[8] + lap_id[9]);
    $('#lap_dataset_option').val(lap_number);
}
*/


function handleLaps(){

    var lap_selection = $('#lap_dataset_option').val();
    drawDyGraph( activity.datafile.lap(lap_selection) );
    
}

function selectTimeDistance(){
    var dataset_option = ($('#time_radio:checked').val() == "on") ? "time" : "distance";
    drawDyGraph(activity.datafile.dataset(dataset_option));
}


function drawGauge(params){
    var gauge = new JustGage({
        id: params['id'], 
        value: params['value'], 
        min: params['min'],
        max: params['max'],
        title: params['title'],
        label: "",
        valueFontColor: "#999",
        levelColors: params['colors'],
        levelColorsGradient: true,
        valueFontColor: params['valueFontColor'],
        levelColors: [ "#999999", params['valueFontColor']],
        gaugeWidthScale: .4,
        gaugeColor: "#333333",
        showInnerShadow: true,
        refreshAnimationType: "linear",
        refreshAnimationTime: 100

    });
    return gauge;
}


function drawDyGraph(list){


    dygraph_data = list;
    console.info("Dygraph: dataset contains "+ list.length +" values.");

    g = new Dygraph(
          document.getElementById("chart_canvas"),
          dygraph_data,
          {
            //rollPeriod: 14,
            //showRoller: true,
            title:  "TSS:"+ activity.datafile.wattage().TSS + 
                    " IF:" + activity.datafile.wattage().IF +
                    " NP:" + activity.datafile.wattage().NP,
            legend: false,
            highlightCircleSize: 5,
            strokeWidth: 2,
            fillGraph: true,
            errorBars: false,
            drawXGrid: false,
            drawYGrid: false,
            drawYAxis: false,
            //showRangeSelector: false,
            //rangeSelectorPlotFillColor: "rgba(127,255,0,0.2)",
            //rangeSelectorPlotStrokeColor: alt_color,
            labelsSeparateLines: false,
            hideOverlayOnMouseOut: true,
            showLabelsOnHighlight: false,
            /*
                Setting LNG / LAT here only because we need it in this array for consistency when updating
                markers on the map.  These are set with false visibility because we never want to show
                them on the graph. The colors are set to black for the same reason.  This is a hack but
                should work for now.
            */
            labels: ["Distance", "Watts", "HR", "Cadence", "Altitude", "Speed", "LNG", "LAT", "GRADE"],
            visibility: [true, true, true, true, true, false, false, false],
            colors: [power_color, hr_color, cadence_color, alt_color, speed_color, "#000", "#000", "#000"],
            axisLabelColor: "#fff",
            series: {
                'Altitude': {
                    axis: 'Y2',
                    drawYAxis: false
                },

            },
            axes: {
                x: {
                    axisLabelFormatter: xAxisLabelFormatter,
                    axisLabelFontSize: 12,
                    axisLabelColor: "#FFF"
                },
                y2: {
                    drawYAxis: false
                }
            },

            highlightCallback:  mouseOverCanvasCallback,
            unhighlightCallback: mouseOutCanvasCallback,
            underlayCallback: drawCanvasUnderlay

          }


    );

    // show visibility based on what is currently checked.
    g.setVisibility(0, $('#0').prop('checked'));
    g.setVisibility(1, $('#1').prop('checked'));
    g.setVisibility(2, $('#2').prop('checked'));
    g.setVisibility(3, $('#3').prop('checked'));
    g.setVisibility(4, $('#4').prop('checked'));

    // zero out display values.
    mouseOutCanvasCallback();
}

/*
function highlightTableRow(id){
    $(id).css({'background-color':'#7fff00', 'color':'#666'}).animate({'background-color':'#FFF'}, 2000);
}

function resetTableRow(id){
    $(id).css({'background-color':'', 'color':''});
}

function findLapFromX(x){

    for ( var i = 0; i < current_lap_start.length; i++ ){
        if( x >= current_lap_start[i] && x < current_lap_start[i+1]){
            return i;
        }
    }

    return false;
}
*/

/*
function resetLapRows(){
    for ( var i = 0; i < current_lap_start.length; i++){
        resetTableRow('#lap_row_' + i);
    }
}

function highlightLapRow(x){
    resetLapRows();
    var lap_id = findLapFromX(x);
    if(typeof(lap_id) == 'number'){
        highlightTableRow('#lap_row_' + lap_id);
    }
}
*/

function xAxisLabelFormatter(x){
    var data_option = ($('#time_radio:checked').val() == "on") ? "time" : "distance";
    return   ( data_option == "distance") ? milesFormatFromFeet(x) : timeFormatFromSeconds(x);
}

// Draws canvas underlay for laps
function drawCanvasUnderlay (canvas, area, g) {

    /*
    for (var i=0; i < current_lap_start.length; i++ ) {

        var bottom_left = g.toDomCoords(current_lap_start[i], -20);
        var top_right = g.toDomCoords(current_lap_start[i], +20);

        var left = bottom_left[0];
        var right = top_right[0];

        canvas.fillStyle = "rgba(255, 255, 0, 1.0)";
        canvas.fillRect(left, area.y, right - left, area.h);
    }

    */
    return true;
}

function mouseOutCanvasCallback(event, x, points, row, seriesName){

    power_gauge.refresh(0);
    power_zone_gauge.refresh(0);
    watts_kg_gauge.refresh(0);
    hr_gauge.refresh(0);
    hr_zone_gauge.refresh(0);
    cadence_gauge.refresh(0);
    alt_gauge.refresh(0);
    percent_grade_gauge.refresh(0);
    speed_gauge.refresh(0);

    if ( Gmaps.map.markers.length > 0 ){
        Gmaps.map.markers[0].setMap(null);
        Gmaps.map.markers = [];
    }
    
}

// Handles dynamic updates when mouse is over the graph.
function mouseOverCanvasCallback(event, x, points, row, seriesName){

    var datapoints = {
            Watts: 0,
            HR: 0,
            Cadence: 0,
            Altitude: 0,
            Speed: 0
    };

    for (var i = 0; i < points.length; i++){
        datapoints[ points[i]['name'] ] = points[i]['yval'];
    }


    var power_zone = dataPointToZoneHighRes(datapoints['Watts'], power_zones);
    var hr_zone = dataPointToZoneHighRes(datapoints['HR'], hr_zones);
    var lng = dygraph_data[row][6];
    var lat = dygraph_data[row][7];
    var percent_grade = dygraph_data[row][8];
    var LatLong = new google.maps.LatLng(lat,lng);

    power_gauge.refresh(roundNumber(datapoints['Watts'],0) );
    power_zone_gauge.refresh( roundNumber(power_zone,1) );
    watts_kg_gauge.refresh( roundNumber(datapoints['Watts']/<%= current_user.weight %>,1) );
    hr_gauge.refresh(roundNumber(datapoints['HR'],0));
    hr_zone_gauge.refresh(roundNumber(hr_zone,1) );
    cadence_gauge.refresh(roundNumber(datapoints['Cadence'],0));
    alt_gauge.refresh(roundNumber(datapoints['Altitude'],0));
    percent_grade_gauge.refresh(roundNumber(percent_grade,1));
    speed_gauge.refresh(datapoints['Speed']);

    var data_option = ($('#time_radio:checked').val() == "on") ? "time" : "distance";
    if ( $('#time_radio:checked').val() == "on" ){
        $('#chart_xvalues').html( timeFormatFromSeconds(x) );
    }
    else {
        $('#chart_xvalues').html(milesFormatFromFeet(x) +" miles");
    }

    if ( Gmaps.map.markers.length > 0 ){
        Gmaps.map.markers[0].setPosition(LatLong);
        if(percent_grade < 0){
            Gmaps.map.markers[0].setIcon("/icons/bike_downhill.png");
        }
        else if(percent_grade > 0 ){
            Gmaps.map.markers[0].setIcon("/icons/bike_uphill.png");
        }
        else{
            Gmaps.map.markers[0].setIcon("/icons/cycling.png");
        }
    }
    else {
    
        Gmaps.map.markers[0] = Gmaps.map.createMarker({
            Lat: lat,
            Lng: lng,
            rich_marker: null,
            marker_picture: "",
            marker_width: 10,
            marker_height: 10
        });
        Gmaps.map.markers[0].setIcon("/icons/cycling.png");

    }

}

// Toggles check boxes shows / hides a dataset on the graph.
function toggleCheck(el) {
    g.setVisibility(parseInt(el.id), el.checked);
}

/*
function generateLatLongData(list) {
    var lat_long = [];
    for(var i=0; i<list.length; i++){
        if (list[i][6] > 0 || list[i][7] > 0) {
            lat_long.push( { lng:list[i][6], lat: list[i][7] } );
        }
    }
    return [lat_long];
}
*/


function dataPointToZoneHighRes(value, zones){

    if ( withinRange(value,zones['z0'], zones['z1']) ){
            return roundNumber((value/zones['z1'])+1,2);
        }
        
        else if ( withinRange(value,zones['z1']+1, zones['z2']) ){
            return roundNumber((value/zones['z2'])+2,2);
        }

        else if ( withinRange(value,zones['z2']+1, zones['z3']) ){
            return roundNumber((value/zones['z3'])+3,2);
        }

        else if ( withinRange(value,zones['z3']+1, zones['z4']) ){
            return roundNumber((value/zones['z4'])+4,2);
        }

        else if ( withinRange(value,zones['z4']+1, zones['z5']) ){
            return roundNumber((value/zones['z5'])+5,2);
        }

        // for power Z6 tops at 1500.
        else if ( withinRange(value,zones['z5']+1, zones['z6']) ) {
            return roundNumber((value/zones['z6'])+6,2);
        }
        // for power z7 tops at 2000.
        else if ( withinRange(value,zones['z6'], zones['z7']) ) {
            return roundNumber((value/zones['z7'])+7,2);
        }
            
        else {
            return 7;
        }
}

function percentInZones(list,zones,index){

    var value = 0;
    var zone_percent = [0,0,0,0,0,0,0,0];
    var list_length = list.length;

    for(var i = 0; i< list_length; i++){
        value = list[i][index];
        
        if ( withinRange(value,zones['z0'], zones['z1']) ){
            zone_percent[0]++;
        }
        
        else if ( withinRange(value,zones['z1'], zones['z2']) ){
            zone_percent[1]++;
        }

        else if ( withinRange(value,zones['z2'], zones['z3']) ){
            zone_percent[2]++;
        }

        else if ( withinRange(value,zones['z3'], zones['z4']) ){
            zone_percent[3]++;
        }

        else if ( withinRange(value,zones['z4'], zones['z5']) ){
            zone_percent[4]++;
        }

        else if ( withinRange(value,zones['z5'], zones['z6']) ) {
            zone_percent[5]++;
        }

        else if ( withinRange(value,zones['z6'], zones['z7']) ) {
            zone_percent[6]++;
        }
            
        else {
            zone_percent[7]++;
        }

    }

    for ( var i=0; i<zone_percent.length; i++){
        zone_percent[i] = roundNumber( (zone_percent[i]/list_length)*100 ,1);
    }

    return zone_percent;

}

